GETWD
getwd
getwd()
getwd()
2 + 3
10 + 20
# R 패키지 보기
dim(available.packages())
# R 패키지 보기
dim(available.packages())
# R 패키지 목록 보기
available.packages()
# R Session 보기
sessionInfo()
# stringr 패키지 설치
install.packages("stringr")
installed.packages()
# 패키지 메모리 로드
library(stringr)
# 현재 로드된 패키지 확인
search()
# 패키지 삭제
remove.packages("stringr")
# 현재 로드된 패키지 확인
search()
data()
library(stringr)
search()
install.packages("stringr")
install.packages("stringr")
hist(Nile)
hist(Nile, freq = TRUE) #hist 매개변수 freq 기본값 true
hist(Nile, freq = FALSE) #boolean 값은 대문자로 약속
lines(density(Nile))
hist(Nile, freq = FALSE) #boolean 값은 대문자로 약속
hist(Nile, freq = TRUE) #hist 매개변수 freq 기본값 true
hist(Nile, freq = FALSE) #boolean 값은 대문자로 약속
lines(density(Nile))
data()
par(mflow=c(1,1))
par(mfrow=c(1,1))
hist(rnorm(20))
pdf("c:/workspaces/batch.pdf")
par(mfrow=c(1,1))
pdf("C:/workspaces/batch.pdf")
hist(rnorm(20))
dev.off()
var1 <- 0 #변수안에 하나의 값이 저장되있는 경우우
var1
var1
var1 <- 1
var1
var1 <- 2
var1
goods.code <- 'a001'
goods.name <- '냉장고'
goods.price <- 850000
names <- c("홍길동", "이순신", "유관순순")
names
names <- c("홍길동", "이순신", "유관순")
names
sum(10, 20, 30, 40, 50)
sum(10, 20, 30, 40, NA)
sum(10, 20, 30, 40, NA, na.rm = TRUE)
string <- "홍길동"
string
is.character(string)
is.integar(string)
is.integer(string)
int <- 20
x <- is.numeric(int)
x # TRUE
is.logical(x) # TRUE
x <- c(1, 2, "3")
x
x * 3
result <- as.numeric(x) # 강제 형변환 as.
result
result <- as.numeric(x) * 3 # 강제 형변환 as.
result
z <- 5.3 - 3i
Re(z)
Im(z)
is.complex(z) # TRUE
as.complex(5.3) # 5.3 + 0i
mode(int) # "numeric"
mode(string) # "character"
x <- TRUE
mode(x) # "logical"
class(int) # "numeric"
class(string) # "character"
class(x) # "logical"
gender <- c("man", "woman", "woman", "man", "man")
plot(gender) # error
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio")
# 키보드로 숫자 입력하기
num <- scan()
num
num <- scan()
num
sum(num)
# 키보드로 문자 입력하기
name <- scan(what = character())
name
# 편집기 이용 데이터프레임 만들기
df <- data.frame() # 빈 데이터프레임 생성
df <- edit(df)
df
# 1) read.table() 함수 이용
#   - 컬럼명이 없는 파일 불러오기
getwd()
setwd("../data")
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio/data")
student <- read.table(file="student.txt")
student
source("C:/DevSource/bigdata_workspaces/R_Rstudio/script/chap03_DataIO.R", encoding = 'UTF-8')
# 1) read.table() 함수 이용
#   - 컬럼명이 없는 파일 불러오기
getwd()
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio/data")
student <- read.table(file="student.txt")
student
mode(student); class(student)
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table(file="student1.txt", header = T)
student1
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose(), header = T)
student1
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table(file="student2.txt", sep = ";", header = T)
student2
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table(file="student3.txt", header = T, na.strings = "-") # 문자열 -> NA처리
student3
#   - csv 파일 형식 불러오기
student4 <- read.csv(file="student4.txt", na.strings = "-")
student4
# read.xlsx() 함수 이용 - 엑셀데이터 읽어오기
# 패키지 설치와 java 실행 환경 설정
install.packages("rJava") # rJava 패키지 설치
install.packages("xlsx")  # xlsx 패키지 설치
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311')
# 관련 패키지 메모리 로드
library(rJava)
library(xlsx)
# 엑셀 파일 가져오기
studentex <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
studentex
# 단계1 : 세계 GDP 순위 데이터 가져오기
GDP_ranking <- read.csv("https://databank.worldbank.org/data/download/GDP.csv", encoding = "UTF-8")
GDP_ranking
head(GDP_ranking, 20)
dim(GDP_ranking)
# 데이터를 가공하기 위해 불필요한 행과 열을 제거한다.
GDP_ranking2 <- GDP_ranking[-c(1:4), c(1,2,4,5)]
head(GDP_ranking2)
# 상위 16개 국가 선별한다.
GDP_ranking16 <- head(GDP_ranking2, 16) # 상위 16개 국가
GDP_ranking16
# 데이터프레임을 구성하는 4개의 열에 대한 이름을 지정한다.
names(GDP_ranking16) <- c('Code', 'Ranking', 'Nation', 'GDP')
GDP_ranking16
dim(GDP_ranking16)
# 단계2 : 세계 GDP 상위 16위 국가 막대 차트 시각화
gdp <- GDP_ranking16$GDP
nation <- GDP_ranking16$Nation
gdp
num_gdp <- as.numeric(str_replace_all(gdp, ',', ''))
install.packages("stringr")
library(stringr)
num_gdp <- as.numeric(str_replace_all(gdp, ',', ''))
num_gdp
GDP_ranking16$GDP <- num_gdp
# 막대차트 시각화
barplot(GDP_ranking16$GDP, col = rainbow(16),
xlab = '국가(nation)', ylab='단위(달러)', names.arg=nation)
# 1,000단위 축소
num_gdp2 <- num_gdp / 1000
GDP_ranking16$GDP2 <- num_gdp2
barplot(GDP_ranking16$GDP2, col = rainbow(16),
main = "2020년도 GDP 세계 16위 국가",
xlab = '국가(nation)', ylab='단위(천달러)', names.arg=nation)
GDP_ranking16
# 단계1 : XML / httr 패키지 설치
install.packages("XML")
install.packages("httr")
# 단계2 : 미국의 주별 1인당 소득 자료 가져오기.
url <- "https://ssti.org/blog/useful-stats-capita-personal-income-state-2010-2015"
get_url <- GET(url) # httr 제공
library(XML)
# 단계2 : 미국의 주별 1인당 소득 자료 가져오기.
url <- "https://ssti.org/blog/useful-stats-capita-personal-income-state-2010-2015"
library(httr)
get_url <- GET(url) # httr 제공
get_url
get_url$content # 16진수
rawToChar(get_url$content) # html 태그 변환
html_cont <- readHTMLTable(rawToChar(get_url$content), stringsAsFactors=F)
str(html_cont) # list
html_cont
html_cont <- as.data.frame(html_cont) # data.frame형 변환
str(html_cont)
head(html_cont)
# 단계4 : 컬럼명을 수정한 후 뒷부분 6개 관측치 보기
names(html_cont) <- c("State", "y2010", "y2011", "y2012", "y2013", "y2014", "y2015")
tail(html_cont)
# 2. 데이터 저장하기
# 2-1. 화면(콘솔) 출력
#  1) cat() 함수
x <- 10
y <- 20
z <- x * y
cat("x * y의 결과는 ", z, "입니다.\n") # \n : 줄바꿈.
#  2) print() 함수
print(z) # 변수 또는 수식만 가능
print(z * 10)
print("x * y = ", z) # error
# 2-2. 파일에 데이터 저장
#  1) sink() 함수를 이용한 파일 저장
getwd()
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio/output")
library(RSADBE)
data("Severity_Counts") # Severity_Counts 데이터 셋 가져오기
Severity_Counts
sink("severity.txt") # 저장할 파일 open
severity <- Severity_Counts # 데이터 셋을 변수에 저장.
severity  # 콘솔에 출력되지 않고, 파일에 저장
sink()    # 오픈된 파일 close
#  2) write.table() 함수 이용 파일 저장
# 탐색기를 이용하여 데이터 가져오기
studenttx <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
studenttx
# 기본 속성으로 저장 - 행이름과 따옴표가 붙는다.
write.table(studenttx, "stdt.txt")
# 'row.names=F' 속성을 이용하여 행이름 제거하여 저장한다.
write.table(studenttx, "stdt2.txt", row.names=F)
# 'quote=F' 속성을 이용하여 따옴표를 제거하여 저장한다.
write.table(studenttx, "stdt3.txt", quote=F)
# 행이름 제거 + 따옴표 제거
write.table(studenttx, "stdt4.txt", row.names=F, quote=F)
html_cont # 데이터프레임 확인
write.table(html_cont, "GNP_United States.txt", row.names = F)
GNP_US <- read.table("GNP_United States.txt", sep = "", header = T)
GNP_US
str(GNP_US)
#  3) write.xlsx() 함수 이용 파일 저장 - 엑셀 파일로 저장
library(rJava)
library(xlsx) # excel data 입출력 함수 제공
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
write.xlsx(st.df, "studenttx.xlsx") # excel 형식으로 저장.
#  3) write.xlsx() 함수 이용 파일 저장 - 엑셀 파일로 저장
library(rJava)
library(xlsx) # excel data 입출력 함수 제공
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
write.xlsx(st.df, "studenttx.xlsx") # excel 형식으로 저장.
write.csv(st.df, "stdf.csv", row.names = F, quote = F)
# 산술연산자
num1 <- 100 # 피연산자1
num2 <- 20  # 피연산자2
result <- num1 + num2  # 덧셈
result
result <- num1 - num2  # 뺄셈
result
result <- num1 * num2  # 곱셈
result
result <- num1 / num2  # 나눗셈
result
result <- num1 %% num2  # 나머지 연산자
result
result <- num1^2   # 제곱연산자(num1 ** 2)
result
result <- num1^num2   # 100의 20승(10의 40승과 동일한 결과)
result   # [1] 1e+40 -> 1 * 10^40
# 비교(관계) 연산자
# (1) 동등비교
boolean <- num1 == num2 # 두 변수의 값이 같은지 비교
boolean
boolean <- num1 != num2 # 두 변수의 값이 다른지 비교
boolean
# (2) 크기비교
boolean <- num1 > num2
boolean
boolean <- num1 >= num2
boolean
boolean <- num1 < num2
boolean
boolean <- num1 <= num2
boolean
# 논리 연산자
logical <- num1 >= 50 & num2 <= 10
logical
logical <- num1 >= 50 | num2 <= 10
logical
x <- TRUE; y <- FALSE
xor(x, y)
x <- TRUE; y <- TRUE
xor(x, y)
logical <- num1 >= 50
logical
logical <- !(num1 >= 50)
logical
# 1) if()
x <- 10
# 1) if()
x <- 10
y <- 5
z <- x * y
z
if(x*y > 40){ # 산술 > 비교 > 논리
cat("x*y의 결과는 40이상입니다.\n")  # \n :줄바꿈
cat("x*y = ", z, '\n')
print(z)
}else{
cat("x*y의 결과는 40미만입니다. x*y=", z, "\n")
}
if(x*y > 40){ # 산술 > 비교 > 논리
cat("x*y의 결과는 40이상입니다.\n")  # \n :줄바꿈
cat("x*y = ", z, '\n')
print(z)
}else{
cat("x*y의 결과는 40미만입니다. x*y=", z, "\n")
}
# 학점 구하기
score <- scan()
if(score >= 90){ # 조건식1
result = "A학점"
}else if(score >= 80){ # 조건식1
result = "B학점"
}else if(score >= 70){ # 조건식2
result = "C학점"
}else if(score >= 60){ # 조건식3
result = "D학점"
}else{
result = "F학점"
}
cat("당신의 학점은 ", result) # 당신의 학점은?
score <- c(78, 95, 85, 65)
score
ifelse(score >= 80, "우수", "노력")
# ifelse() 응용
getwd()
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio/data")
excel <- read.csv("excel.csv", header = T)
excel
q1 <- excel$q1 # q1 변수값 추출
ifelse(q1 >= 3, sqrt(q1), q1) # 3보다 큰 경우 sqrt() 함수 적용.
ifelse(q1 >= 2 & q1 <= 4, q1^2, q1)
# 3) switch문
#   형식) switch(비교구문, 실행구문1, 실행구문2, 실행구문3, ...)
switch("name", id="hong", pwd="1234", age=25, name="홍길동")
empname <- scan(what = "")
empname # "kang"
switch(empname, hong=250, lee=350, kim=200, kang=400) # 400
name <- c("kim", "lee", "choi", "park")
which(name == "choi") # 3(index)
# 데이터프레임에서 사용
no <- c(1:5)
name <- c("홍길동", "이순신", "강감찬", "유관순", "김유신")
score <- c(85, 78, 89, 90, 74)
exam <- data.frame(학번=no, 이름=name, 성적=score)
exam
sel <- which(exam$이름=="유관순") # 4
exam[sel,]
i <- c(1:10)
i
d <- numeric() # 빈 vector(숫자)
for(n in i){ # 10회 반복
print(n*10)
print(n)
d[n] <- n*2
}
d
for(n in i){
if(n %% 2 != 0){
print(n) # %% : 나머지 값 - 홀수만 출력.
}
}
for(n in i){
if(n %% 2 == 0){
next # 다음 문장 skip -> 반복문 계속(자바의 continue 키워드와 동일.)
}else{
print(n) # %% : 나머지 값 - 홀수만 출력.
}
}
# 벡터 데이터 사용 예
score <- c(85, 95, 98)
name <- c("홍길동", "이순신", "강감찬")
i <- 1 # 첨자로 사용되는 변수
for(s in score){
cat(name[i], " -> ", s, "\n")
i <- i+1
}
# 2) 반복문 - while(조건){표현식}
i = 0
while(i < 10){
i <- i + 1
print(i)
}
# 매개변수가 없는 함수 예
f1 <- function(){
cat("매개변수가 없는 함수")
}
f1() # 함수 호출 방법
# 매개변수가 있는 함수 예
f2 <- function(x){
cat("x의 값 = ", x, "\n")
print(x)
}
f2(10) # 실인수
f2(c(1:10)) # 벡터
# 리턴값이 있는 함수 예
f3 <- function(x, y){
add <- x + y # 덧셈
return (add)   # 결과 반환
}
add <- f3(10, 30)
add
# 기술 통계량을 계산하는 함수 정의
# 파일 불러오기
getwd()
setwd("C:/DevSource/bigdata_workspaces/R_Rstudio/data")
test <- read.csv("test.csv", header = T)
head(test)
# A 컬럼 요약통계량, 빈도수 구하기.
summary(test) # 요약통계량.
table(test$A) # A 변수 대상 빈도 수.
max(test$A)   # 최대값
min(test$A)   # 최소값
length(test)  # 5
# 각 컬럼 단위 요약통계량과 빈도 수 구하기.
data_pro <- function(x){
for(idx in 1:length(x)){
cat(idx, '번째 컬럼의 빈도분석 결과')
print(table(x[idx]))
cat('\n')
}
for(idx in 1:length(x)){
f <- table(x[idx])
cat(idx, '번째 컬럼의 최대값/최소값 \n')
cat("max=", max(f), "min=", min(f), '\n')
}
}
data_pro(test) # 함수 호출
